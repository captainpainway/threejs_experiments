{"version":3,"sources":["Sphere.js","App.js","reportWebVitals.js","index.js"],"names":["Sphere","props","mesh","useRef","Analyzer","sound","analyzer","useEffect","current","THREE","useFrame","data","getFrequencyData","scale","x","y","z","index","inMin","outMin","position","ref","args","color","r","g","b","parseInt","Math","sin","angle","PI","sphereColor","App","useState","play","setPlay","className","intensity","fallback","PositionalAudio","url","distance","loop","increase","spheres","i","cos","key","idx","number","push","radius","createSpheres","multisampling","luminanceThreshold","luminanceSmoothing","Fab","size","aria-label","style","top","left","onClick","pause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39f7e337.chunk.js","sourcesContent":["import './App.css';\nimport React, {useRef, useEffect} from 'react';\nimport * as THREE from 'three';\nimport {useFrame} from '@react-three/fiber';\n\nfunction Sphere(props) {\n    const mesh = useRef();\n\n    // I don't remember where I found this algorithm,\n    // but it gives a nice rainbow gradient around the circle.\n    const sphereColor = () => {\n        let r, g, b;\n        r = parseInt((Math.sin(props.angle - Math.PI) + 1) * 128);\n        g = parseInt((Math.sin((props.angle - Math.PI) - 4 * Math.PI / 3) + 1) * 128);\n        b = parseInt((Math.sin((props.angle - Math.PI) - 2 * Math.PI / 3) + 1) * 128);\n        return new THREE.Color(`rgb(${r}, ${g}, ${b})`);\n    }\n\n    /*\n    We want the scale of the frequency data (0 - 255) to map to the scale of the spheres.\n     */\n    function adjustScale(number, inMin, inMax, outMin, outMax) {\n        return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n    }\n\n    /*\n     * Each sphere is getting its own analyzer node.\n     * This sets the scale of the spheres as the music plays.\n     * Setting the size to every second index of the frequency data.\n     */\n    function Analyzer({sound}) {\n        const analyzer = useRef();\n\n        useEffect(() => {\n            analyzer.current = new THREE.AudioAnalyser(sound.current, 128);\n        }, [sound]);\n\n        useFrame(() => {\n            if (analyzer.current) {\n                let data = analyzer.current.getFrequencyData();\n                mesh.current.scale.x =\n                    mesh.current.scale.y =\n                        mesh.current.scale.z =\n                            adjustScale(data[props.index * 2], 0, 255, 0.25, 1.5);\n            }\n        });\n\n        return <></>;\n    }\n\n    return (\n        <>\n            <mesh position={props.position} ref={mesh}>\n                <sphereGeometry args={[0.5, 20, 20]}/>\n                <meshPhongMaterial color={sphereColor()} />\n            </mesh>\n            <Analyzer sound={props.sound} />\n        </>\n);\n}\n\nexport default Sphere;\n","import './App.css';\nimport React, {useState, useRef, Suspense} from 'react';\nimport {Canvas} from \"@react-three/fiber\";\nimport Sphere from \"./Sphere\";\nimport Fab from '@material-ui/core/Fab';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport {PositionalAudio} from '@react-three/drei';\nimport {EffectComposer, Bloom, SMAA} from '@react-three/postprocessing';\n\nfunction App() {\n    const sound = useRef();\n    const [play, setPlay] = useState(true);\n\n    // Adding spheres in a circle.\n    function createSpheres() {\n        const number = 20,\n            increase = Math.PI * 2 / number;\n        let angle = Math.PI / 2;\n        let spheres = []; // The array of spheres to pass to the canvas.\n\n        for (let i = 0; i < number; i++) {\n            let x = 5 * Math.cos(angle);\n            let y = 5 * Math.sin(angle);\n            let key = `sphere_${i}`;\n            // I want the spheres to be a nice loop, so the index goes up to number / 2,\n            // then back down.\n            let idx = i < number / 2 ? i : number - i;\n            spheres.push(<Sphere\n                key={key}\n                position={[x, y, -10]}\n                radius={0.25}\n                angle={angle}\n                sound={sound}\n                index={idx}\n            />);\n            angle += increase;\n        }\n        return spheres;\n    }\n\n    // Added a button to pause the music.\n    function playMusic() {\n        if (play) {\n            sound.current.pause();\n        } else {\n            sound.current.play();\n        }\n        setPlay(!play);\n    }\n\n    return (\n        <div className=\"App\">\n            <Canvas>\n                <ambientLight intensity={0.2} />\n                <directionalLight position={[0, 0, 5]} />\n                <Suspense fallback={null}>\n                    <PositionalAudio\n                        url='./Riviere.mp3'\n                        distance={10}\n                        loop\n                        ref={sound}\n                    />\n                    {createSpheres()}\n                    <EffectComposer multisampling={0}>\n                        <Bloom intensity={0.5} luminanceThreshold={0} luminanceSmoothing={0.8} />\n                        <SMAA />\n                    </EffectComposer>\n                </Suspense>\n            </Canvas>\n            <Fab size=\"small\" color=\"primary\" aria-label=\"play\" style={{\n                position: 'absolute',\n                top: 20,\n                left: 20\n            }} onClick={playMusic}>\n                {!play ?\n                <PlayArrowIcon /> :\n                <PauseIcon />}\n            </Fab>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}